"""

높은 차수의 다항식을 고려할 수록 당장 주어진 데이터와 잘 들어맞는 것 처럼 보이지만
얻은 계수를 토대로 값을 예측할 때는 오히려 더 좋지 않은 추론을 하게 될 수도 있습니다.

예제는 낮은 차수로부터 점점 높은 차수로 피팅한 결과를 그림파일로 저장합니다.

.. image:: EX2_overfit.png

`EX2_overfit.py <EX2_>`_

.. _EX2: https://github.com/soma0sd/Python-Learning/blob/main/W102_Analysis_Data/EX2_overfit.py

.. literalinclude:: EX2_overfit.py
   :language: python
   :linenos:
   :lines: 19-
"""
import numpy as np
import matplotlib.pyplot as plt

x = [ 0.0202184,   0.07103606,  0.0871293,   0.11827443,  0.14335329,  0.38344152,  0.41466194,  0.4236548,   0.43758721,  0.46147936,  0.52184832,  0.52889492,  0.54488318,  0.5488135,   0.56804456,  0.60276338,  0.63992102,  0.64589411,  0.71518937,  0.77815675,  0.78052918,  0.79172504,  0.79915856,  0.83261985,  0.87001215,  0.891773,    0.92559664,  0.94466892,  0.96366276,  0.97861834]
y = [ 1.0819082, 0.87027612, 1.14386208,  0.70322051,  0.78494746, -0.25265944, -0.22066063, -0.26595867, -0.4562644,  -0.53001927, -0.86481449, -0.99462675, -0.87458603, -0.83407054, -0.77090649, -0.83476183, -1.03080067, -1.02544303, -1.0788268,  -1.00713288, -1.03009698, -0.63623922, -0.86230652, -0.75328767, -0.70023795, -0.41043495, -0.50486767, -0.27907117, -0.25994628, -0.06189804]

degs = [1, 2, 3, 4, 5, 8, 13, 18]


if __name__ == "__main__":
    plt.figure(figsize=(8, 10))
    new_x = np.linspace(0, 1)

    for ix, deg in enumerate(degs):
        ax = plt.subplot(4, 2, ix+1)
        fit = np.poly1d(np.polyfit(x, y, deg))
        ax.plot(x, y, ".k")
        ax.plot(new_x, fit(new_x), "--r", label="DEG: {}".format(deg))
        ax.legend()

    plt.savefig("EX2_overfit.png", bbox_inches='tight')
